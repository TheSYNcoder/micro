# import requests
# import lxml

# url = 'https://electricalvoice.com/opcodes-8085-microprocessor/'
# response = requests.get(url )
# print(response.status_code)
# # print(response.content)
# # print(response.text)

# from bs4 import BeautifulSoup
# soup = BeautifulSoup( response.content , 'lxml')

# a =soup.find_all('table')
# rows = a[2].find_all('tr')
# operand=[]
# opcode=[]
# size=[]
# for i  in range(len(rows)):
#     operand.append(rows[i].find('td' , width="171").text)
#     opcode.append(rows[i].find('td' , width="157").text)
#     size.append(rows[i].find('td' , width="152").text)

# dic ={}
# for i  in range(1 , len(operand)):
#     dic[operand[i]]= { "name" : opcode[i] , "size" : size[i]}

# print(dic)
# import json
# x = json.dumps(dic)
# with open('data.json' , 'w') as f:
#     f.write(x)
# f.close()

import json
with open('data.json' , 'r' ) as f:
    data = f.read()
dic = json.loads(data)
# print(len(dic.keys()))
nd = dic
# print(nd.keys())
# nd['ACI Data']['description'] = 'Add with carry immediate'
# nd['ADC A']['description'] = 'Add with carry'
# nd['ADC B']['description'] = 'Add with carry'
# nd['ADC C']['description'] = 'Add with carry'
# nd['ADC D']['description'] = 'Add with carry'
# nd['ADC E']['description'] = 'Add with carry'
# nd['ADC H']['description'] = 'Add with carry'
# nd['ADC L']['description'] = 'Add with carry'
# nd['ADC M']['description'] = 'Add with carry to memory (HL Pair)'
# nd['ADD A']['description'] = 'Add'
# nd['ADD B']['description'] = 'Add'
# nd['ADD C']['description'] = 'Add'
# nd['ADD D']['description'] = 'Add'
# nd['ADD E']['description'] = 'Add'
# nd['ADD H']['description'] = 'Add'
# nd['ADD L']['description'] = 'Add'
# nd['ADI Data']['description'] = 'Add Immediate'
# nd['ANA A']['description'] = 'And Accumulator'
# nd['ANA B']['description'] = 'And Accumulator'
# nd['ANA C']['description'] = 'And Accumulator'
# nd['ANA D']['description'] = 'And Accumulator'
# nd['ANA E']['description'] = 'And Accumulator'
# nd['ANA H']['description'] = 'And Accumulator'
# nd['ANA L']['description'] = 'And Accumulator'
# nd['ANA M']['description'] = 'And Accumulator to memory'
# nd['ANI Data']['description'] = 'And Immediate'
# nd['CALL Label']['description'] = 'Call unconditional'
# nd['CC Label']['description'] = 'Call on carry'
# nd['CM Label']['description'] = 'Call on minus'
# nd['CMA']['description'] = 'Complement accumulator , A = ~A'
# nd['CMC']['description'] = 'Complement carry , Cy = ~Cy'
# nd['CMP A']['description'] = 'Compare , A - (r)'
# nd['CMP B']['description'] = 'Compare , A - (r)'
# nd['CMP C']['description'] = 'Compare , A - (r)'
# nd['CMP D']['description'] = 'Compare , A - (r)'
# nd['CMP E']['description'] = 'Compare , A - (r)'
# nd['CMP H']['description'] = 'Compare , A - (r)'
# nd['CMP L']['description'] = 'Compare , A - (r)'
# nd['CMP M']['description'] = 'Compare with memory , A - (HL)'
# nd['CNC Label']['description'] = 'Call on no carry'
# nd['CNZ Label']['description'] = 'Call on no carry'
# nd['CP Label']['description'] = 'Call on no carry'

# for key in dic.keys():
#     print('nd[\'{}\'][\'description\'] = \'\''.format(key))


nd['ACI Data']['description'] = 'Add with carry immediate'
nd['ADC A']['description'] = 'Add with carry'
nd['ADC B']['description'] = 'Add with carry'
nd['ADC C']['description'] = 'Add with carry'
nd['ADC D']['description'] = 'Add with carry'
nd['ADC E']['description'] = 'Add with carry'
nd['ADC H']['description'] = 'Add with carry'
nd['ADC L']['description'] = 'Add with carry'
nd['ADC M']['description'] = 'Add with carry to memory(HL)'
nd['ADD A']['description'] = 'ADD'
nd['ADD B']['description'] = 'ADD'
nd['ADD C']['description'] = 'ADD'
nd['ADD D']['description'] = 'ADD'
nd['ADD E']['description'] = 'ADD'
nd['ADD H']['description'] = 'ADD'
nd['ADD L']['description'] = 'ADD'
nd['ADD M']['description'] = 'ADD to memory'
nd['ADI Data']['description'] = 'ADD Immediate'
nd['ANA A']['description'] = 'AND Accumulator , A = A & r'
nd['ANA B']['description'] = 'AND Accumulator , A = A & r'
nd['ANA C']['description'] = 'AND Accumulator , A = A & r'
nd['ANA D']['description'] = 'AND Accumulator , A = A & r'
nd['ANA E']['description'] = 'AND Accumulator , A = A & r'
nd['ANA H']['description'] = 'AND Accumulator , A = A & r'
nd['ANA L']['description'] = 'AND Accumulator , A = A & r'
nd['ANA M']['description'] = 'AND Accumulator and memory'
nd['ANI Data']['description'] = 'AND Immediate'
nd['CALL Label']['description'] = 'Call unconditional'
nd['CC Label']['description'] = 'Call on carry'
nd['CM Label']['description'] = 'Call on minus'
nd['CMA']['description'] = 'Complement accumulator'
nd['CMC']['description'] = 'Complement carry'
nd['CMP A']['description'] = 'Compare , A -r'
nd['CMP B']['description'] = 'Compare , A -r'
nd['CMP C']['description'] = 'Compare , A -r'
nd['CMP D']['description'] = 'Compare , A -r'
nd['CMP E']['description'] = 'Compare , A -r'
nd['CMP H']['description'] = 'Compare , A -r'
nd['CMP L']['description'] = 'Compare , A -r'
nd['CMP M']['description'] = 'Compare with memory, A -(HL)'
nd['CNC Label']['description'] = 'Call on carry'
nd['CNZ Label']['description'] = 'Call on no zero'
nd['CP Label']['description'] = 'Call on Plus'
nd['CPE Label']['description'] = 'Call on Parity Even'
nd['CPI Data']['description'] = 'Compare Immediate'
nd['CPO Label']['description'] = 'Call on Parity Odd'
nd['CZ Label']['description'] = 'Call on Zero'
nd['DAA']['description'] = 'Decimal Adjust Accumulator , A =BCD format , used for BCD Addition'
nd['DAD B']['description'] = 'Double Add BC to HL , HL =HL +BC'
nd['DAD D']['description'] = 'Double Add DE to HL , HL =HL +DE'
nd['DAD H']['description'] = 'Double Add HL to HL , HL =HL +HL'
nd['DAD SP']['description'] = 'Double Add SP(Stack Pointer) to HL , HL =HL +SP'
nd['DCR A']['description'] = 'Decrement'
nd['DCR B']['description'] = 'Decrement'
nd['DCR C']['description'] = 'Decrement'
nd['DCR D']['description'] = 'Decrement'
nd['DCR E']['description'] = 'Decrement'
nd['DCR H']['description'] = 'Decrement'
nd['DCR L']['description'] = 'Decrement'
nd['DCR M']['description'] = 'Decrement Memory , HL = HL -1'
nd['DCX B']['description'] = 'Decrement BC'
nd['DCX D']['description'] = 'Decrement DE'
nd['DCX H']['description'] = 'Decrement HL'
nd['DCX SP']['description'] = 'Decrement Stack Pointer'
nd['DI']['description'] = 'Disable interrrupts'
nd['EI']['description'] = 'Enable interrupts'
nd['HLT']['description'] = 'Halt'
nd['IN Port-address']['description'] = 'Input ,A =[p]'
nd['INR A']['description'] = 'Increment'
nd['INR B']['description'] = 'Increment'
nd['INR C']['description'] = 'Increment'
nd['INR D']['description'] = 'Increment'
nd['INR E']['description'] = 'Increment'
nd['INR H']['description'] = 'Increment'
nd['INR L']['description'] = 'Increment'
nd['INR M']['description'] = 'Increment memory'
nd['INX B']['description'] = 'Increment BC'
nd['INX D']['description'] = 'Increment DE'
nd['INX H']['description'] = 'Increment HL'
nd['INX SP']['description'] = 'Increment Stack Pointer'
nd['JC Label']['description'] = 'Jump on carry'
nd['JM Label']['description'] = 'Jump on minus'
nd['JMP Label']['description'] = 'Jump unconditional'
nd['JNC Label']['description'] = 'Jump on no carry'
nd['JNZ Label']['description'] = 'Jump on no Zero'
nd['JP Label']['description'] = 'Jump on Plus'
nd['JPE Label']['description'] = 'Jump on Parity Even'
nd['JPO Label']['description'] = 'Jump on Parity Odd'
nd['JZ Label']['description'] = 'Jump on Zero'
nd['LDA Address']['description'] = 'Load accumulator direct A=[a]'
nd['LDAX B']['description'] = 'Load accumulator indirect A=[BC]'
nd['LDAX D']['description'] = 'Load accumulator indirect A=[DE]'
nd['LHLD Address']['description'] = 'Load HL Direct'
nd['LXI B']['description'] = 'Load Immediate BC'
nd['LXI D']['description'] = 'Load Immediate DE'
nd['LXI H']['description'] = 'Load Immediate HL'
nd['LXI SP']['description'] = 'Load Immediate Stack Pointer'
nd['MOV A, A']['description'] = 'Move register to register , A =A'
nd['MOV A, B']['description'] = 'Move register to register , A =B'
nd['MOV A, C']['description'] = 'Move register to register , A =C'
nd['MOV A, D']['description'] = 'Move register to register , A =D'
nd['MOV A, E']['description'] = 'Move register to register , A =E'
nd['MOV A, H']['description'] = 'Move register to register , A =H'
nd['MOV A, L']['description'] = 'Move register to register , A =L'
nd['MOV A, M']['description'] = 'Move memory to register , A =[HL]'
nd['MOV B, A']['description'] = 'Move register to register , B =A'
nd['MOV B, B']['description'] = 'Move register to register , B =B'
nd['MOV B, C']['description'] = 'Move register to register , B =C'
nd['MOV B, D']['description'] = 'Move register to register , B =D'
nd['MOV B, E']['description'] = 'Move register to register , B =E'
nd['MOV B, H']['description'] = 'Move register to register , B =H'
nd['MOV B, L']['description'] = 'Move register to register , B =L'
nd['MOV B, M']['description'] = 'Move  memory to register  , B =[HL]'
nd['MOV C, A']['description'] = 'Move register to register , C =A'
nd['MOV C, B']['description'] = 'Move register to register , C =B'
nd['MOV C, C']['description'] = 'Move register to register , C =C'
nd['MOV C, D']['description'] = 'Move register to register , C =D'
nd['MOV C, E']['description'] = 'Move register to register , C =E'
nd['MOV C, H']['description'] = 'Move register to register , C =H'
nd['MOV C, L']['description'] = 'Move register to register , C =L'
nd['MOV C, M']['description'] = 'Move memory to register , C =[HL]'
nd['MOV D, A']['description'] = 'Move register to register , D =A'
nd['MOV D, B']['description'] = 'Move register to register , D =B'
nd['MOV D, C']['description'] = 'Move register to register , D =C'
nd['MOV D, D']['description'] = 'Move register to register , D =D'
nd['MOV D, E']['description'] = 'Move register to register , D =E'
nd['MOV D, H']['description'] = 'Move register to register , D =H'
nd['MOV D, L']['description'] = 'Move register to register , D =L'
nd['MOV D, M']['description'] = 'Move memory to register , D =[HL]'
nd['MOV E, A']['description'] = 'Move register to register , E =A'
nd['MOV E, B']['description'] = 'Move register to register , E =B'
nd['MOV E, C']['description'] = 'Move register to register , E =C'
nd['MOV E, D']['description'] = 'Move register to register , E =D'
nd['MOV E, E']['description'] = 'Move register to register , E =E'
nd['MOV E, H']['description'] = 'Move register to register , E =H'
nd['MOV E, L']['description'] = 'Move register to register , E =L'
nd['MOV E, M']['description'] = 'Move memory to register , E =[HL]'
nd['MOV H, A']['description'] = 'Move register to register , H =A'
nd['MOV H, B']['description'] = 'Move register to register , H =B'
nd['MOV H, C']['description'] = 'Move register to register , H =C'
nd['MOV H, D']['description'] = 'Move register to register , H =D'
nd['MOV H, E']['description'] = 'Move register to register , H =E'
nd['MOV H, H']['description'] = 'Move register to register , H =H'
nd['MOV H, L']['description'] = 'Move register to register , H =L'
nd['MOV H, M']['description'] = 'Move memory to register , H =[HL]'
nd['MOV L, A']['description'] = 'Move register to register , L =A'
nd['MOV L, B']['description'] = 'Move register to register , L =B'
nd['MOV L, C']['description'] = 'Move register to register , L =C'
nd['MOV L, D']['description'] = 'Move register to register , L =D'
nd['MOV L, E']['description'] = 'Move register to register , L =E'
nd['MOV L, H']['description'] = 'Move register to register , L =H'
nd['MOV L, L']['description'] = 'Move register to register , L =L'
nd['MOV L, M']['description'] = 'Move memory to register , L =[HL]'
nd['MOV M, A']['description'] = 'Move register to memory , [HL] =A'
nd['MOV M, B']['description'] = 'Move register to memory , [HL] =B'
nd['MOV M, C']['description'] = 'Move register to memory , [HL] =C'
nd['MOV M, D']['description'] = 'Move register to memory , [HL] =D'
nd['MOV M, E']['description'] = 'Move register to memory , [HL] =E'
nd['MOV M, H']['description'] = 'Move register to memory , [HL] =H'
nd['MOV M, L']['description'] = 'Move register to memory , [HL] =L'
nd['MVI A, Data']['description'] = 'Move Immediate to register'
nd['MVI B, Data']['description'] = 'Move Immediate to register'
nd['MVI C, Data']['description'] = 'Move Immediate to register'
nd['MVI D, Data']['description'] = 'Move Immediate to register'
nd['MVI E, Data']['description'] = 'Move Immediate to register'
nd['MVI H, Data']['description'] = 'Move Immediate to register'
nd['MVI L, Data']['description'] = 'Move Immediate to register'
nd['MVI M, Data']['description'] = 'Move Immediate to memory'
nd['NOP']['description'] = 'No operation'
nd['ORA A']['description'] = 'Inclusive OR Accumulator , A = A v r'
nd['ORA B']['description'] = 'Inclusive OR Accumulator , A = A v r'
nd['ORA C']['description'] = 'Inclusive OR Accumulator , A = A v r'
nd['ORA D']['description'] = 'Inclusive OR Accumulator , A = A v r'
nd['ORA E']['description'] = 'Inclusive OR Accumulator , A = A v r'
nd['ORA H']['description'] = 'Inclusive OR Accumulator , A = A v r'
nd['ORA L']['description'] = 'Inclusive OR Accumulator , A = A v r'
nd['ORA M']['description'] = 'Inclusive OR Memory , A = A v [HL]'
nd['ORI Data']['description'] = 'Inclusive OR Immediate'
nd['OUT Port-Address']['description'] = 'Output'
nd['PCHL']['description'] = 'Jump HL Indirect , PC =[HL]'
nd['POP B']['description'] = 'Pop BC , BC = [SP]+'
nd['POP D']['description'] = 'Pop DE , DE = [SP]+'
nd['POP H']['description'] = 'Pop HL , HL = [SP]+'
nd['POP PSW']['description'] = 'Pop processor status word , PSW ,A = [SP]+'
nd['PUSH B']['description'] = 'PUSH BC ,-[SP] =BC'
nd['PUSH D']['description'] = 'PUSH DE ,-[SP] =DE'
nd['PUSH H']['description'] = 'PUSH HL ,-[SP] =HL'
nd['PUSH PSW']['description'] = 'PUSH Processor Status Word ,-[SP] = PSW ,A'
nd['RAL']['description'] = 'Rotate accumulator left , A={CY,A}<-'
nd['RAR']['description'] = 'Rotate Accumulator Right , A=->{CY,A}'
nd['RC']['description'] = 'Return on carry'
nd['RET']['description'] = 'Return  , PC=[SP]+'
nd['RIM']['description'] = 'Read Interrupt Mask  ,A=mask'
nd['RLC']['description'] = 'Rotate Left Circular , A=A<-'
nd['RM']['description'] = 'Return on Minus'
nd['RNC']['description'] = 'Return on No Carry'
nd['RNZ']['description'] = 'Return on No Zero '
nd['RP']['description'] = 'Return on Plus'
nd['RPE']['description'] = 'Return on Parity Even'
nd['RPO']['description'] = 'Return on Parity ODD'
nd['RRC']['description'] = 'Rotate Right Circular'
nd['RST 0']['description'] = 'Restart  ,-[SP]=PC,PC=0'
nd['RST 1']['description'] = 'Restart  ,-[SP]=PC,PC=1'
nd['RST 2']['description'] = 'Restart  ,-[SP]=PC,PC=2'
nd['RST 3']['description'] = 'Restart  ,-[SP]=PC,PC=3'
nd['RST 4']['description'] = 'Restart  ,-[SP]=PC,PC=4'
nd['RST 5']['description'] = 'Restart  ,-[SP]=PC,PC=5'
nd['RST 6']['description'] = 'Restart  ,-[SP]=PC,PC=6'
nd['RST 7']['description'] = 'Restart  ,-[SP]=PC,PC=7'
nd['RZ']['description'] = 'Return on Zero'
nd['SBB A']['description'] = 'Subtract with Borrow , A=A-r-CY '
nd['SBB B']['description'] = 'Subtract with Borrow , A=A-r-CY '
nd['SBB C']['description'] = 'Subtract with Borrow , A=A-r-CY '
nd['SBB D']['description'] = 'Subtract with Borrow , A=A-r-CY '
nd['SBB E']['description'] = 'Subtract with Borrow , A=A-r-CY '
nd['SBB H']['description'] = 'Subtract with Borrow , A=A-r-CY '
nd['SBB L']['description'] = 'Subtract with Borrow , A=A-r-CY '
nd['SBB M']['description'] = 'Subtract with Borrow , A=A-[HL]-CY '
nd['SBI Data']['description'] = 'Subtract with Borrow Immediate, A=A-r-CY '
nd['SHLD Address']['description'] = 'Store HL Direct , [a]=HL'
nd['SIM']['description'] = 'Set Interrupt Mask , mask=A'
nd['SPHL']['description'] = 'Move HL to SP , SP=HL '
nd['STA Address']['description'] = 'Store Accumulator , [a] =A'
nd['STAX B']['description'] = 'Store Accumulator indirect , [BC]=A'
nd['STAX D']['description'] = 'Store Accumulator indirect ,[DE]=A'
nd['STC']['description'] = 'Set Carry  ,CY=1'
nd['SUB A']['description'] = 'Subtract ,A=A-r'
nd['SUB B']['description'] = 'Subtract ,A=A-r'
nd['SUB C']['description'] = 'Subtract ,A=A-r'
nd['SUB D']['description'] = 'Subtract ,A=A-r'
nd['SUB E']['description'] = 'Subtract ,A=A-r'
nd['SUB H']['description'] = 'Subtract ,A=A-r'
nd['SUB L']['description'] = 'Subtract ,A=A-r'
nd['SUB M']['description'] = 'Subtract memory,A=A-[HL]'
nd['SUI Data']['description'] = 'Subtract Immedaite,A=A-r'
nd['XCHG']['description'] = 'Exchange or Swap HL with DE , HL<->DE'
nd['XRA A']['description'] = 'Exclusive OR Accumulator ,A=Axr'
nd['XRA B']['description'] = 'Exclusive OR Accumulator ,A=Axr'
nd['XRA C']['description'] = 'Exclusive OR Accumulator ,A=Axr'
nd['XRA D']['description'] = 'Exclusive OR Accumulator ,A=Axr'
nd['XRA E']['description'] = 'Exclusive OR Accumulator ,A=Axr'
nd['XRA H']['description'] = 'Exclusive OR Accumulator ,A=Axr'
nd['XRA L']['description'] = 'Exclusive OR Accumulator ,A=Axr'
nd['XRA M']['description'] = 'Exclusive OR Accumulator ,A=Ax[HL]'
nd['XRI Data']['description'] = 'Exclusive OR Immediate ,A=Axn'
nd['XTHL']['description'] = 'Exchange stack Top with HL , [SP]<->HL '

x = json.dumps(nd)
with open('new_data.json' , 'w' ) as f:
    f.write(x)
f.close()










